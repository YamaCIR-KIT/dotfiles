if exists('b:current_syntax')
  finish
endif

let &iskeyword = '@,33,35-38,42-43,45-58,60-64,94,126,_'
" set iskeyword=33,35-38,42-43,45-58,60-90,94-95,97-122,126,_
" 33    !
" 35-38 #$%&
" 42-43 *+
" 45-58 -./[0-9]:
" 60-64 <=>?@
" 94    ^
" 126   ~

let &lispwords = '
      \ =>,
      \ and,
      \ begin,
      \ case,
      \ cond,
      \ define,
      \ define-syntax,
      \ delay,
      \ do,
      \ else,
      \ if,
      \ lambda,
      \ let*,
      \ let,
      \ let-syntax,
      \ letrec,
      \ letrec-syntax,
      \ or,
      \ quasiquote,
      \ quote,
      \ set!,
      \ syntax-rules,
      \ unquote,
      \ unquote-splicing,
      \'


syntax match schemeError oneline /[^ \t()\[\]";]*/
syntax match schemeError oneline /)/

" syntax match	schemeBoolean oneline /#[tf]/
" syntax match	schemeError   oneline /#[tf][^\s\t\[\]()";]\+/
syntax match schemeBoolean /#t\(rue\)\?/
syntax match schemeBoolean /#f\(alse\)\?/

syntax match  schemeComment /;.*$/
" syntax region schemeCommentParenthesis start="(" end=")" contains=schemeCommentParenthesis transparent

" syn match  schemeComment oneline ,#;['`][a-z!$%&*/:<=>?^_~+@#%-][-a-z!$%&*/:<=>?^_~0-9+.@#%]*,
" syn match  schemeComment oneline ,#;[a-z!$%&*/:<=>?^_~+@#%-][-a-z!$%&*/:<=>?^_~0-9+.@#%]*,
" syn match  schemeError   oneline ,#;['`][a-z!$%&*/:<=>?^_~+@#%-][-a-z!$%&*/:<=>?^_~0-9+.@#%]*[^-a-z!$%&*/:<=>?^_~0-9+.@ \t\[\]()";]\+[^ \t\[\]()";]*,
" syn match  schemeError   oneline ,#;[a-z!$%&*/:<=>?^_~+@#%-][-a-z!$%&*/:<=>?^_~0-9+.@#%]*[^-a-z!$%&*/:<=>?^_~0-9+.@ \t\[\]()";]\+[^ \t\[\]()";]*,
" syn region schemeComment matchgroup=Comment start="#;("     matchgroup=Comment end=")" contains=schemeCommentParenthesis
" syn region schemeComment matchgroup=Comment start="#;['`](" matchgroup=Comment end=")" contains=schemeCommentParenthesis

syntax keyword schemeSyntax
      \ ...
      \ =>
      \ and
      \ begin
      \ case
      \ case-lambda
      \ cond
      \ define
      \ define-record-type
      \ define-values
      \ delay
      \ delay-force
      \ do
      \ else
      \ guard
      \ if
      \ lambda
      \ let
      \ let*
      \ let*-values
      \ let-values
      \ letrec
      \ letrec*
      \ or
      \ parameterize
      \ quasiquote
      \ quote
      \ set!
      \ unless
      \ unquote
      \ unquote-splicing
      \ when

syntax keyword schemeProcedure
      \ *
      \ +
      \ -
      \ /
      \ <
      \ <=
      \ =
      \ >
      \ >=
      \ abs
      \ acos
      \ acos
      \ angle
      \ append
      \ apply
      \ asin
      \ assoc
      \ assq
      \ assv
      \ atan
      \ binary-port?
      \ boolean=?
      \ boolean?
      \ bytevector
      \ bytevector-append
      \ bytevector-append
      \ bytevector-copy
      \ bytevector-copy!
      \ bytevector-length
      \ bytevector-u8-ref
      \ bytevector-u8-set!
      \ bytevector?
      \ caaaar
      \ caaadr
      \ caaar
      \ caadar
      \ caaddr
      \ caadr
      \ caar
      \ cadaar
      \ cadadr
      \ cadar
      \ caddar
      \ cadddr
      \ caddr
      \ cadr
      \ call-with-current-continuation
      \ call-with-input-file
      \ call-with-output-file
      \ call-with-port
      \ call-with-values
      \ call/cc
      \ car
      \ cdaaar
      \ cdaadr
      \ cdaar
      \ cdadar
      \ cdaddr
      \ cdadr
      \ cdar
      \ cddaar
      \ cddadr
      \ cddar
      \ cdddar
      \ cddddr
      \ cdddr
      \ cddr
      \ cdr
      \ ceiling
      \ char->integer
      \ char-alphabetic?
      \ char-ci<=?
      \ char-ci<?
      \ char-ci=?
      \ char-ci>=?
      \ char-ci>?
      \ char-downcase
      \ char-foldcase
      \ char-lower-case?
      \ char-numeric?
      \ char-ready?
      \ char-upcase
      \ char-upper-case?
      \ char-whitespace?
      \ char<=?
      \ char<?
      \ char=?
      \ char>=?
      \ char>?
      \ char?
      \ close-input-port
      \ close-output-port
      \ close-port
      \ command-line
      \ complex?
      \ cons
      \ cos
      \ current-error-port
      \ current-input-port
      \ current-jiffy
      \ current-output-port
      \ current-second
      \ delete-file
      \ denominator
      \ digit-value
      \ display
      \ dynamic-wind
      \ emergency-exit
      \ environment
      \ eof-object
      \ eof-object?
      \ eq?
      \ equal?
      \ eqv?
      \ error
      \ error-object-irritants
      \ error-object-message
      \ error-object?
      \ eval
      \ even?
      \ exact
      \ exact->inexact
      \ exact-integer-sqrt
      \ exact-integer?
      \ exact?
      \ exit
      \ exp
      \ expt
      \ features
      \ file-error?
      \ file-exists?
      \ finite?
      \ floor
      \ floor-quotient
      \ floor-remainder
      \ floor/
      \ flush-output-port
      \ for-each
      \ force
      \ gcd
      \ get-environment-variable
      \ get-environment-variables
      \ get-output-bytevector
      \ get-output-string
      \ imag-part
      \ inexact
      \ inexact->exact
      \ inexact?
      \ infinite?
      \ input-port-open?
      \ input-port?
      \ integer->char
      \ integer?
      \ interaction-environment
      \ jiffies-per-second
      \ lcm
      \ length
      \ list
      \ list->string
      \ list->vector
      \ list-copy
      \ list-ref
      \ list-set!
      \ list-tail
      \ list?
      \ load
      \ log
      \ magnitude
      \ make-bytevector
      \ make-list
      \ make-parameter
      \ make-polar
      \ make-promise
      \ make-rectangular
      \ make-string
      \ make-vector
      \ map
      \ max
      \ member
      \ memq
      \ memv
      \ min
      \ modulo
      \ nan?
      \ negative?
      \ newline
      \ not
      \ null-environment
      \ null?
      \ number->string
      \ number?
      \ numerator
      \ odd?
      \ open-binary-input-file
      \ open-binary-output-file
      \ open-input-bytevector
      \ open-input-file
      \ open-input-string
      \ open-output-bytevector
      \ open-output-file
      \ open-output-string
      \ output-port-open?
      \ output-port?
      \ pair?
      \ peek-char
      \ peek-u8
      \ port?
      \ positive?
      \ procedure?
      \ promise?
      \ quotient
      \ raise
      \ raise-continuable
      \ rational?
      \ rationalize
      \ read
      \ read-bytevector
      \ read-bytevector!
      \ read-char
      \ read-error?
      \ read-line
      \ read-string
      \ read-u8
      \ real-part
      \ real?
      \ remainder
      \ reverse
      \ round
      \ scheme-report-environment
      \ set-car!
      \ set-cdr!
      \ sin
      \ sqrt
      \ square
      \ string
      \ string->list
      \ string->number
      \ string->symbol
      \ string->utf8
      \ string->vector
      \ string-append
      \ string-ci<=?
      \ string-ci<?
      \ string-ci=?
      \ string-ci>=?
      \ string-ci>?
      \ string-copy
      \ string-copy!
      \ string-downcase
      \ string-fill!
      \ string-foldcase
      \ string-for-each
      \ string-length
      \ string-map
      \ string-ref
      \ string-set!
      \ string-upcase
      \ string<=?
      \ string<?
      \ string=?
      \ string>=?
      \ string>?
      \ string?
      \ substring
      \ symbol->string
      \ symbol=?
      \ symbol?
      \ syntax-error
      \ tan
      \ textual-port?
      \ transcript-off
      \ transcript-on
      \ truncate
      \ truncate-quotient
      \ truncate-remainder
      \ truncate/
      \ u8-ready?
      \ utf8->string
      \ values
      \ vector
      \ vector->list
      \ vector->string
      \ vector-append
      \ vector-copy
      \ vector-copy!
      \ vector-fill!
      \ vector-for-each
      \ vector-length
      \ vector-map
      \ vector-ref
      \ vector-set!
      \ vector?
      \ with-exception-handler
      \ with-input-from-file
      \ with-output-to-file
      \ write
      \ write-bytevector
      \ write-char
      \ write-shared
      \ write-simple
      \ write-string
      \ write-u8
      \ zero?

syntax region schemeString start=/\%(\\\)\@<!"/ skip=/\\[\\"]/ end=/"/
syntax region schemeSymbol start=/\%(\\\)\@<!|/ skip=/\\[\\|]/ end=/|/

syntax match schemeCharacter /#\\.[^ `'\t\n\[\]()]*/
syntax match schemeCharacter /#\\x[0-9a-fA-F]\+/

syntax match schemeParentheses /[^ '`\t\n()";]\+/
syntax match schemeParentheses /)/

syntax match schemeIdentifier  /[^ '`\t\n()"|;][^ '`\t\n()"|;]*/

syntax match schemeNumber /\(#[dbeio]\)*[+\-]*\([0-9]\+\|inf.0\|nan.0\)\(\/\|\.\)\?[0-9+\-@\ilns]*\>/
syntax match schemeNumber /#x[+\-]*[0-9a-fA-F]\+\>/

" syn region schemeQuote matchgroup=schemeData start=/'[`']*/ end=/[ \t\n()\[\]";]/me=e-1
" syn region schemeQuote matchgroup=schemeData start=/'['`]*"/ skip=/\\[\\"]/ end=/"/
" syn region schemeQuote matchgroup=schemeData start=/'['`]*|/ skip=/\\[\\|]/ end=/|/
" syn region schemeQuote matchgroup=schemeData start=/'['`]*#\?(/ end=/)/ contains=ALLBUT,schemeQuasiquote,schemeQuasiquoteForm,schemeUnquote,schemeForm,schemeDatumCommentForm,schemeImport,@schemeImportCluster,@schemeSyntaxCluster
"
" syn region schemeQuasiquote matchgroup=schemeData start=/`['`]*/ end=/[ \t\n()\[\]";]/me=e-1
" syn region schemeQuasiquote matchgroup=schemeData start=/`['`]*#\?(/ end=/)/ contains=ALLBUT,schemeQuote,schemeQuoteForm,schemeForm,schemeDatumCommentForm,schemeImport,@schemeImportCluster,@schemeSyntaxCluster
"
" syn region schemeUnquote matchgroup=schemeParentheses start=/,/ end=/[ `'\t\n\[\]()";]/me=e-1 contained contains=ALLBUT,schemeDatumCommentForm,@schemeImportCluster
" syn region schemeUnquote matchgroup=schemeParentheses start=/,@/ end=/[ `'\t\n\[\]()";]/me=e-1 contained contains=ALLBUT,schemeDatumCommentForm,@schemeImportCluster
" syn region schemeUnquote matchgroup=schemeParentheses start=/,(/ end=/)/ contained contains=ALLBUT,schemeDatumCommentForm,@schemeImportCluster
" syn region schemeUnquote matchgroup=schemeParentheses start=/,@(/ end=/)/ contained contains=ALLBUT,schemeDatumCommentForm,@schemeImportCluster
"
" syn region schemeQuoteForm matchgroup=schemeData start=/(/ end=/)/ contained contains=ALLBUT,schemeQuasiquote,schemeQuasiquoteForm,schemeUnquote,schemeForm,schemeDatumCommentForm,schemeImport,@schemeImportCluster,@schemeSyntaxCluster
" syn region schemeQuasiquoteForm matchgroup=schemeData start=/(/ end=/)/ contained contains=ALLBUT,schemeQuote,schemeForm,schemeDatumCommentForm,schemeImport,@schemeImportCluster,@schemeSyntaxCluster
"
" syn region schemeMultilineComment start=/#|/ end=/|#/ contains=schemeMultilineComment
"
" syn region schemeForm matchgroup=schemeParentheses start="(" end=")" contains=ALLBUT,schemeUnquote,schemeDatumCommentForm,@schemeImportCluster
" syn region schemeForm matchgroup=schemeParentheses start="\[" end="\]" contains=ALLBUT,schemeUnquote,schemeDatumCommentForm,@schemeImportCluster
"
" syn region schemeVector matchgroup=schemeData start="#(" end=")" contains=ALLBUT,schemeQuasiquote,schemeQuasiquoteForm,schemeUnquote,schemeForm,schemeDatumCommentForm,schemeImport,@schemeImportCluster,@schemeSyntaxCluster
" syn region schemeVector matchgroup=schemeData start="#[fsu]\d\+(" end=")" contains=schemeNumber,schemeComment,schemeDatumComment
"
" syn match   schemeImportKeyword "\(([ \t\n]*\)\@<=\(except\|only\|prefix\|rename\|srfi\)\>"
" syn region  schemeImportForm matchgroup=schemeParentheses start="(" end=")" contained contains=schemeIdentifier,schemeComment,schemeDatumComment,@schemeImportCluster
" syn cluster schemeImportCluster contains=schemeImportForm,schemeImportKeyword
"
" syn region schemeDatumComment matchgroup=schemeDatumComment start=/#;[ \t\n`']*/ end=/[ \t\n()\[\]";]/me=e-1
" syn region schemeDatumComment matchgroup=schemeDatumComment start=/#;[ \t\n`']*"/ skip=/\\[\\"]/ end=/"/
" syn region schemeDatumComment matchgroup=schemeDatumComment start=/#;[ \t\n`']*|/ skip=/\\[\\|]/ end=/|/
" syn region schemeDatumComment matchgroup=schemeDatumComment start=/#;[ \t\n`']*\(#\([usf]\d\+\)\?\)\?(/ end=/)/ contains=schemeDatumCommentForm
" syn region schemeDatumCommentForm start="(" end=")" contained contains=schemeDatumCommentForm
"
" syn cluster schemeSyntaxCluster contains=schemeFunction,schemeKeyword,schemeSyntax,schemeExtraSyntax,schemeLibrarySyntax,schemeSyntaxSyntax
"
" syn keyword schemeLibrarySyntax define-library
" syn keyword schemeLibrarySyntax export
" syn keyword schemeLibrarySyntax include
" syn keyword schemeLibrarySyntax include-ci
" syn keyword schemeLibrarySyntax include-library-declarations
" syn keyword schemeLibrarySyntax library
" syn keyword schemeLibrarySyntax cond-expand
"
" syn keyword schemeSyntaxSyntax define-syntax
" syn keyword schemeSyntaxSyntax let-syntax
" syn keyword schemeSyntaxSyntax letrec-syntax
" syn keyword schemeSyntaxSyntax syntax-rules

" highlight default link schemeConstant Constant
" highlight default link schemeData Delimiter
" highlight default link schemeDatumComment Comment
" highlight default link schemeDatumCommentForm Comment
" highlight default link schemeDelimiter Delimiter
" highlight default link schemeExtraSyntax Underlined
" highlight default link schemeIdentifier Normal
" highlight default link schemeImport PreProc
" highlight default link schemeImportKeyword PreProc
" highlight default link schemeKeyword Type
" highlight default link schemeLibrarySyntax PreProc
" highlight default link schemeMultilineComment Comment
" highlight default link schemeNumber Number
" highlight default link schemeQuasiquote Delimiter
" highlight default link schemeQuote Delimiter
" highlight default link schemeSpecialSyntax Special
" highlight default link schemeSyntaxSyntax PreProc
" highlight default link schemeTypeSyntax Type

highlight default link schemeBoolean     Boolean
highlight default link schemeComment     Comment
highlight default link schemeError       Error
highlight default link schemeParentheses Normal
highlight default link schemeProcedure   Function
highlight default link schemeString      String
highlight default link schemeSymbol      Normal
highlight default link schemeSyntax      Statement
highlight default link schemeCharacter   Character

let b:current_syntax = 'scheme'

